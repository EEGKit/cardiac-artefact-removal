# Takes the SNR, INPSR and RI results generated by the other scripts and compiles in excel sheets

import numpy as np
import h5py
import pandas as pd

if __name__ == '__main__':
    excel_path = '/data/pt_02569/ResultsComparison/Results_Dataset1.xls'
    esg_chans = ['S35', 'S24', 'S36', 'Iz', 'S17', 'S15', 'S32', 'S22',
                 'S19', 'S26', 'S28', 'S9', 'S13', 'S11', 'S7', 'SC1', 'S4', 'S18',
                 'S8', 'S31', 'SC6', 'S12', 'S16', 'S5', 'S30', 'S20', 'S34', 'AC',
                 'S21', 'S25', 'L1', 'S29', 'S14', 'S33', 'S3', 'AL', 'L4', 'S6',
                 'S23']
    methods_nonssp = ['Prepared', 'PCA', 'ICA']
    methods_ssp = [f'SSP{n}' for n in np.arange(1, 21)]
    methods = methods_nonssp + methods_ssp

    #######################################################################
    # SNR
    #######################################################################
    df_snr = pd.DataFrame(columns=['Method','Median SNR','Tibial SNR'])
    df_snr['Method'] = methods
    df_snr.set_index('Method', inplace=True)

    keywords = ['snr_med', 'snr_tib']
    input_paths = {'Prepared': "/data/pt_02569/tmp_data/prepared_py/",
                   'PCA': "/data/pt_02569/tmp_data/ecg_rm_py/",
                   'ICA': "/data/pt_02569/tmp_data/baseline_ica_py/",
                   'SSP': "/data/p_02569/SSP/"}

    print("\n")
    for i in np.arange(0, len(input_paths)):
        name = list(input_paths.keys())[i]
        input_path = input_paths[name]
        fn = f"{input_path}snr.h5"
        # All have shape (24, 1) bar SSP which is (36, 16)
        with h5py.File(fn, "r") as infile:
            # Get the data
            snr_med = infile[keywords[0]][()]
            snr_tib = infile[keywords[1]][()]

        average_med = np.nanmean(snr_med, axis=0)
        average_tib = np.nanmean(snr_tib, axis=0)

        if name == 'SSP':
            for n in np.arange(0, 20):
                df_snr.at[f'{name}{n+1}', 'Median SNR'] = average_med[n]
                df_snr.at[f'{name}{n + 1}', 'Tibial SNR'] = average_tib[n]
        else:
            df_snr.at[f'{name}', 'Median SNR'] = average_med[0]
            df_snr.at[f'{name}', 'Tibial SNR'] = average_tib[0]

    #############################################################
    # INPSR
    #############################################################
    input_paths = {'PCA': "/data/pt_02569/tmp_data/ecg_rm_py/",
                   'ICA': "/data/pt_02569/tmp_data/baseline_ica_py/",
                   'SSP': "/data/p_02569/SSP/"}
    methods_nonssp = ['PCA', 'ICA']
    methods_ssp = [f'SSP{n}' for n in np.arange(1, 21)]
    methods = methods_nonssp + methods_ssp
    df_inpsr = pd.DataFrame(columns=['Method', 'INPS Median', 'INPS Tibial'])
    df_inpsr['Method'] = methods
    df_inpsr.set_index('Method', inplace=True)

    # All files are 36x39 dimensions - n_subjects x n_channels
    keywords = ['pow_med', 'pow_tib']
    fn = f"/data/pt_02569/tmp_data/prepared_py/inps_yasa.h5"
    with h5py.File(fn, "r") as infile:
        # Get the data
        pow_med_prep = infile[keywords[0]][()]
        pow_tib_prep = infile[keywords[1]][()]
    print('\n')
    print('Relevant Channels Improved Normalised Power Spectrum')
    median_pos = []
    tibial_pos = []
    for channel in ['S23', 'L1', 'S31']:
        tibial_pos.append(esg_chans.index(channel))
    for channel in ['S6', 'SC6', 'S14']:
        median_pos.append(esg_chans.index(channel))

    for i in np.arange(0, len(input_paths)):
        name = list(input_paths.keys())[i]
        input_path = input_paths[name]

        if name == 'SSP':
            for n in np.arange(1, 21):  # 5, 21
                fn = f"/data/p_02569/SSP/inps_yasa_{n}.h5"
                with h5py.File(fn, "r") as infile:
                    # Get the data
                    pow_med = infile[keywords[0]][()]
                    pow_tib = infile[keywords[1]][()]

                inps_med = (np.mean(pow_med_prep[:, median_pos] / pow_med[:, median_pos], axis=tuple([0, 1])))
                inps_tib = (np.mean(pow_tib_prep[:, tibial_pos] / pow_tib[:, tibial_pos], axis=tuple([0, 1])))

                df_inpsr.at[f'{name}{n}', 'INPS Median'] = inps_med
                df_inpsr.at[f'{name}{n}', 'INPS Tibial'] = inps_tib
        else:
            fn = f"{input_path}inps_yasa.h5"
            with h5py.File(fn, "r") as infile:
                # Get the data
                pow_med = infile[keywords[0]][()]
                pow_tib = infile[keywords[1]][()]
            inps_med = (np.mean(pow_med_prep[:, median_pos] / pow_med[:, median_pos], axis=tuple([0, 1])))
            inps_tib = (np.mean(pow_tib_prep[:, tibial_pos] / pow_tib[:, tibial_pos], axis=tuple([0, 1])))

            df_inpsr.at[f'{name}', 'INPS Median'] = inps_med
            df_inpsr.at[f'{name}', 'INPS Tibial'] = inps_tib

    ############################################################################
    # RI
    ############################################################################
    df_ri = pd.DataFrame(columns=['Method', 'Residual Median', 'Residual Tibial'])
    df_ri['Method'] = methods
    df_ri.set_index('Method', inplace=True)

    keywords = ['res_med', 'res_tib']
    fn = f"/data/pt_02569/tmp_data/prepared_py/res.h5"
    with h5py.File(fn, "r") as infile:
        # Get the data
        res_med_prep = infile[keywords[0]][()]
        res_tib_prep = infile[keywords[1]][()]
    median_pos = []
    tibial_pos = []
    for channel in ['S23', 'L1', 'S31']:
        tibial_pos.append(esg_chans.index(channel))
    for channel in ['S6', 'SC6', 'S14']:
        median_pos.append(esg_chans.index(channel))

    print("\n")
    print('Relevant Channels Residual Intensity')
    for i in np.arange(0, len(input_paths)):
        name = list(input_paths.keys())[i]
        input_path = input_paths[name]

        if name == 'SSP':
            # SSP
            for n in np.arange(1, 21):  # 5, 21
                fn = f"/data/p_02569/SSP/res_{n}.h5"
                with h5py.File(fn, "r") as infile:
                    # Get the data
                    res_med = infile[keywords[0]][()]
                    res_tib = infile[keywords[1]][()]

                residual_med = (np.mean(res_med[:, median_pos] / res_med_prep[:, median_pos], axis=tuple([0, 1]))) * 100
                residual_tib = (np.mean(res_tib[:, tibial_pos] / res_tib_prep[:, tibial_pos], axis=tuple([0, 1]))) * 100

                df_ri.at[f'{name}{n}', 'Residual Median'] = residual_med
                df_ri.at[f'{name}{n}', 'Residual Tibial'] = residual_tib
        else:
            fn = f"{input_path}res.h5"
            with h5py.File(fn, "r") as infile:
                # Get the data
                res_med = infile[keywords[0]][()]
                res_tib = infile[keywords[1]][()]

            residual_med = (np.mean(res_med[:, median_pos] / res_med_prep[:, median_pos], axis=tuple([0, 1]))) * 100
            residual_tib = (np.mean(res_tib[:, tibial_pos] / res_tib_prep[:, tibial_pos], axis=tuple([0, 1]))) * 100

            df_ri.at[f'{name}', 'Residual Median'] = residual_med
            df_ri.at[f'{name}', 'Residual Tibial'] = residual_tib

    ##########################################################################
    # Save dataframes as sheets in an excel file
    ##########################################################################
    # create a excel writer object
    with pd.ExcelWriter(excel_path, engine='openpyxl') as writer:

        # use to_excel function and specify the sheet_name and index
        # to store the dataframe in specified sheet
        df_snr.to_excel(writer, sheet_name="SEP_SNR", index=True)
        df_ri.to_excel(writer, sheet_name="ResidualIntensity_relch", index=True)
        df_inpsr.to_excel(writer, sheet_name="YASA_relch", index=True)

